stages:
  - check
  - build
  - save
  - upload

variables:
  K8S_MASTER_IP: "172.16.116.4" #k8s master 的ip
  K8S_MASTER_USER: "root" #k8s master 的用户名
  K8S_MASTER_PASSWD: "public" #k8s master 的用户密码
  UPLOAD_IMAGE_REP:  "all"    #是否上传镜像仓库，true :上传镜像仓库 false:传递压缩文件 all：上传镜像仓库和传输压缩文件
  #以上用于ssh连接k8s集群
  BASE_IMAGE: "dashboard:1.8.3" #项目依赖的基础镜像
  CHECK_FILE: "package.json" #该文件发生变化将更新BASE_IMAGE
  PROJECT_IMAGES_FILTER: "lenovo.com/cloud_server/kubernetes*" #项目生成的镜像名称匹配规则

before_script:
  - source /etc/profile

check_job:
  image: initbase:v1  #检查基础镜像所依赖的镜像
  stage: check
  script:
    - ls
    - ls ./src/
    #- python2 built_image.py "check" $BASH_IMAGE  $CI_PROJECT_NAME $CHECK_FILE #检查是否需要生成基础镜像或者更新基础镜像，如果生成或者更新镜像将抛出异常
  retry: 1 #重试1次

build_job:
  image: $BASE_IMAGE
  stage: build
  script:
  - echo "Release build..."
  - chmod a+x ./build/postinstall.sh
  - cp /home/node_modules . -r
  - cp /home/home . -r
  - cp /home/dist . -r
  - cp /home/.tmp . -r
  - cp /home/.tools . -r
  #- export http_proxy=http://172.16.0.4:8118
  #- export https_proxy=https://172.16.0.4:8118
  # - npm i --unsafe-perm
  - gulp docker-image:head:cross --tag $(git rev-parse --short HEAD)
  - docker images
  - git rev-parse --short HEAD
  tags:
    - docker

save_job:
  image: $BASE_IMAGE
  stage: save
  script:
    - python2 built_image.py "save" $CI_PROJECT_NAME  $(git rev-parse --short HEAD)  $UPLOAD_IMAGE_REP    #(args项目名称)  调用打包镜像脚本

upload_job:
  image: $BASE_IMAGE
  stage: upload
  script:
    - python2 built_image.py "upload" $CI_PROJECT_NAME  $PROJECT_IMAGES_FILTER$(git rev-parse --short HEAD)  $UPLOAD_IMAGE_REP $K8S_MASTER_IP $K8S_MASTER_USER  $K8S_MASTER_PASSWD  #(args项目名称)  调用打包镜像脚本
